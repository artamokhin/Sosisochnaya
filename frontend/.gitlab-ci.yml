include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
  - build
  - test
  - release
  - deploy


build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  only:
    changes:
      - frontend/*
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --tag $CI_REGISTRY_IMAGE/sausage-nginx:$CI_COMMIT_SHA
      --no-cache
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-nginx:$CI_COMMIT_SHA


sonarqube-frontend-sast:
  stage: test
  only:
    changes:
    - frontend/*
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_TOKEN: $SonarQubeToken
    SONAR_HOST_URL: $SonarQubeUrl
    GIT_DEPTH: 0
  script:
    - cd frontend
    - sonar-scanner
      -Dsonar.projectKey=$SonarQubeProjectFrontend
      -Dsonar.sources=.
      -Dsonar.host.url=$SonarQubeUrl
      -Dsonar.login=$SonarQubeLogin


upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-nginx:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-nginx:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-nginx:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-nginx:latest


deploy-nginx:
  stage: deploy
  image: docker:23.0.1-dind
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

  script:
    - scp ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "SPRING_DATASOURCE_URL=${PSQL_DATASOURCE}";
       export "SPRING_DATASOURCE_USERNAME=${PSQL_USER}";
       export "SPRING_DATASOURCE_PASSWORD=${PSQL_PASSWORD}";
       export "SPRING_DATA_MONGODB_URI=${MONGO_DATA}";
       /bin/bash -s " < ./frontend/frontend_deploy.sh